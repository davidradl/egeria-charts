{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"About"},{"location":"charts/base/","text":"","title":"Base"},{"location":"charts/lab/","text":"","title":"Lab"},{"location":"contribute/devguide/","text":"","title":"Devguide"},{"location":"intro/helm/","text":"","title":"Helm"},{"location":"intro/k8s/","text":"What is Kubernetes? \u00b6 Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications. - https://kubernetes.io This is how the official website describes it. It's effectively a standardized way of deploying applications in a very scalable way - from everything such as development prototyping through to massive highly available enterprise solutions. In this document I'll give a very brief summary that should help those of you new to Kubernetes to make your first steps with Egeria. What are the key concepts in Kubernetes? \u00b6 These are just some of the concepts that can help to understand what's going on. This isn't a complete list. Api \u00b6 Kubernetes using a standard API which is oriented around manipulating Objects. The commands are therefore very standard, it's all about the objects. Making it so \u00b6 The system is always observing the state of the system through these objects, and where there are discrepancies, taking action to 'Make it So' as Captain Picard would say. The approach is imperitive. So we think of these objects as describing the desired state of the system. Namespace \u00b6 A namespace provides a way of seperating out kubernetes resources by users or applications as a convenience. It keeps names more understandable, and avoids global duplicates. For example a developer working on a k8s cluster may have a namespace of their own to experiment in. Container \u00b6 A Container is what runs stuff. It's similar to a Virtual Machine in some ways, but much more lightweight. Containers use code Images which may be custom built, or very standard off-the-shelf reusable items. Containers are typically very focussed on a single need or application. Pod \u00b6 A Pod is a single group of one or more containers. Typically a single main container runs in a pod, but this may be supported by additional containers for log, audit, security, initialization etc. Think of this as an atomic unit that can run a workload. Pods are disposeable - they will come and go. Other objects are concerned with providing a reliable service. Service \u00b6 A service provides network accessibility to one or more pods. The service name will be added into local Domain Name Service (DNS) for easy accessibility from other pods. Load can be shared across multiple pods Ingres \u00b6 Think of Ingress as the entry point to Kubernetes services from an external network perspective - so it is these addresses external users would be aware of. Deployment \u00b6 A deployment keeps a set of pods running - including replica copies, ie restarted if stopped, matching resource requirements, handling node failure . Stateful Set \u00b6 A stateful set goes further than a deployment in that it keeps a well known identifier for each identical replica. This helps in allocating persistent storage & network resources to a replica ConfigMap \u00b6 A config map is a way of keeping configuration (exposed as files or environment variables) seperate to an application. Secret \u00b6 A secret is used to keep information secret, as the name might suggest ... This might be a password or an API key & the data is encrypted Custom Objects \u00b6 In addition to this list -- and many more covered in the official documentation -- Kubernetes also supports custom resources. These form a key part of Kubernetes Operators . Storage \u00b6 Pods can request storage - which is known as a persistent volume claim (PVC), which are either manually or automatically resolved to a persistent volume. See the k8s docs Persistent Volumes Why are we using Kubernetes? \u00b6 All sizes of systems can run kubernetes applications - from a small raspberry pi through desktops and workstations through to huge cloud deployments. Whilst the details around storage, security, networking etc do vary by implementation, the core concepts, and configurations work across all. Some may be more concerned about an easy way to play with development code, try out new ideas, whilst at the far end of the spectrum enterprises want something super scalable and reliable, and easy to monitor. For egeria we want to achieve two main things * Provide easy to use demos and tutorials that show how Egeria can be used and worked with without requiring too much complex setup. * Provide examples that show how Egeria can be deployed in k8s, and then adapted for the organization's needs. Other alternatives that might come to mind include * Docker -- whilst simple, this is more geared around running a single container, and building complex environment means a lot of work combining application stacks together, often resulting in something that isn't usable. We do of course still have container images, which are essential to k8s, but these are simple & self contained. * docker-compose -- this builds on docker in allowing multiple containers and servers to be orchestrated, but it's much less flexible & scalable than kubernetes. How do I get access to Kubernetes? \u00b6 Getting Started provides links to setting up Kubernetes in many environments. Below we'll take a quick look at some of the simpler examples, especially for new users. microk8s (Linux, Windows, macOS) \u00b6 Official microk8s site 4GB is recommended as a minimum memory requirement. MacOS \u00b6 The macos install docs cover the steps needed to install microk8s. Most of the Egeria development team use MacOS, so the instructions are elaborated and qualified here: The recommended approach uses HomeBrew . This offers a suite of tools often found on linux which are easy to setup on macOS. See install docs IMPORTANT: Before installing, go into System Preferences->Security & Privacy. Click the lock to get into Admin mode. Then ensure Firewall Options->Enable Stealth Mode is NOT enabled (no tick). If it is, microk8s will not work properly . More If you are concerned over the firewall change, or homebrew requirement, refer back to the official k8s documentation & choose another k8s implementation that works for you. Ensure you turn on the following services: storage, dns, helm3 . dashboard is also useful to understand more about k8s and what is running. However it is currently failing as described in issue 2507 As an example, the following commands should get you set up, but always check the official docs for current details brew install ubuntu/microk8s/microk8s microk8s install microk8s status --wait-ready microk8s enable dns storage helm3 microk8s kubectl get all --all-namespaces Kubernetes is now running. Windows \u00b6 Follow the official instructions (untested) Linux \u00b6 Follow the official instructions (untested) Docker Desktop (Windows, macOS) \u00b6 Docker Desktop supports Kubernetes After installing, go into Docker Desktop 'settings and select 'Kubernetes'. Make sure 'Enable Kubernetes' is checked. Also under resources ensure at least 4GB is allocated to Docker Cloud \u00b6 Many cloud providers offer Kubernetes deployments which can be used for experimentation or production. This include Redhat OpenShift on multiple cloud providers including on IBMCloud Kubernetes on IBMCloud Azure Kubernetes Service Google Kubernetes Engine (GKE) Note that in the team's testing we mostly are running Redhat OpenShift on IBMCloud as a managed service. We welcome feedback of running our examples on other environments, especially as some of the specifics around ingress rules, storage, security can vary.","title":"What is Kubernetes?"},{"location":"intro/k8s/#what-is-kubernetes","text":"Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications. - https://kubernetes.io This is how the official website describes it. It's effectively a standardized way of deploying applications in a very scalable way - from everything such as development prototyping through to massive highly available enterprise solutions. In this document I'll give a very brief summary that should help those of you new to Kubernetes to make your first steps with Egeria.","title":"What is Kubernetes?"},{"location":"intro/k8s/#what-are-the-key-concepts-in-kubernetes","text":"These are just some of the concepts that can help to understand what's going on. This isn't a complete list.","title":"What are the key concepts in Kubernetes?"},{"location":"intro/k8s/#api","text":"Kubernetes using a standard API which is oriented around manipulating Objects. The commands are therefore very standard, it's all about the objects.","title":"Api"},{"location":"intro/k8s/#making-it-so","text":"The system is always observing the state of the system through these objects, and where there are discrepancies, taking action to 'Make it So' as Captain Picard would say. The approach is imperitive. So we think of these objects as describing the desired state of the system.","title":"Making it so"},{"location":"intro/k8s/#namespace","text":"A namespace provides a way of seperating out kubernetes resources by users or applications as a convenience. It keeps names more understandable, and avoids global duplicates. For example a developer working on a k8s cluster may have a namespace of their own to experiment in.","title":"Namespace"},{"location":"intro/k8s/#container","text":"A Container is what runs stuff. It's similar to a Virtual Machine in some ways, but much more lightweight. Containers use code Images which may be custom built, or very standard off-the-shelf reusable items. Containers are typically very focussed on a single need or application.","title":"Container"},{"location":"intro/k8s/#pod","text":"A Pod is a single group of one or more containers. Typically a single main container runs in a pod, but this may be supported by additional containers for log, audit, security, initialization etc. Think of this as an atomic unit that can run a workload. Pods are disposeable - they will come and go. Other objects are concerned with providing a reliable service.","title":"Pod"},{"location":"intro/k8s/#service","text":"A service provides network accessibility to one or more pods. The service name will be added into local Domain Name Service (DNS) for easy accessibility from other pods. Load can be shared across multiple pods","title":"Service"},{"location":"intro/k8s/#ingres","text":"Think of Ingress as the entry point to Kubernetes services from an external network perspective - so it is these addresses external users would be aware of.","title":"Ingres"},{"location":"intro/k8s/#deployment","text":"A deployment keeps a set of pods running - including replica copies, ie restarted if stopped, matching resource requirements, handling node failure .","title":"Deployment"},{"location":"intro/k8s/#stateful-set","text":"A stateful set goes further than a deployment in that it keeps a well known identifier for each identical replica. This helps in allocating persistent storage & network resources to a replica","title":"Stateful Set"},{"location":"intro/k8s/#configmap","text":"A config map is a way of keeping configuration (exposed as files or environment variables) seperate to an application.","title":"ConfigMap"},{"location":"intro/k8s/#secret","text":"A secret is used to keep information secret, as the name might suggest ... This might be a password or an API key & the data is encrypted","title":"Secret"},{"location":"intro/k8s/#custom-objects","text":"In addition to this list -- and many more covered in the official documentation -- Kubernetes also supports custom resources. These form a key part of Kubernetes Operators .","title":"Custom Objects"},{"location":"intro/k8s/#storage","text":"Pods can request storage - which is known as a persistent volume claim (PVC), which are either manually or automatically resolved to a persistent volume. See the k8s docs Persistent Volumes","title":"Storage"},{"location":"intro/k8s/#why-are-we-using-kubernetes","text":"All sizes of systems can run kubernetes applications - from a small raspberry pi through desktops and workstations through to huge cloud deployments. Whilst the details around storage, security, networking etc do vary by implementation, the core concepts, and configurations work across all. Some may be more concerned about an easy way to play with development code, try out new ideas, whilst at the far end of the spectrum enterprises want something super scalable and reliable, and easy to monitor. For egeria we want to achieve two main things * Provide easy to use demos and tutorials that show how Egeria can be used and worked with without requiring too much complex setup. * Provide examples that show how Egeria can be deployed in k8s, and then adapted for the organization's needs. Other alternatives that might come to mind include * Docker -- whilst simple, this is more geared around running a single container, and building complex environment means a lot of work combining application stacks together, often resulting in something that isn't usable. We do of course still have container images, which are essential to k8s, but these are simple & self contained. * docker-compose -- this builds on docker in allowing multiple containers and servers to be orchestrated, but it's much less flexible & scalable than kubernetes.","title":"Why are we using Kubernetes?"},{"location":"intro/k8s/#how-do-i-get-access-to-kubernetes","text":"Getting Started provides links to setting up Kubernetes in many environments. Below we'll take a quick look at some of the simpler examples, especially for new users.","title":"How do I get access to Kubernetes?"},{"location":"intro/k8s/#microk8s-linux-windows-macos","text":"Official microk8s site 4GB is recommended as a minimum memory requirement.","title":"microk8s (Linux, Windows, macOS)"},{"location":"intro/k8s/#macos","text":"The macos install docs cover the steps needed to install microk8s. Most of the Egeria development team use MacOS, so the instructions are elaborated and qualified here: The recommended approach uses HomeBrew . This offers a suite of tools often found on linux which are easy to setup on macOS. See install docs IMPORTANT: Before installing, go into System Preferences->Security & Privacy. Click the lock to get into Admin mode. Then ensure Firewall Options->Enable Stealth Mode is NOT enabled (no tick). If it is, microk8s will not work properly . More If you are concerned over the firewall change, or homebrew requirement, refer back to the official k8s documentation & choose another k8s implementation that works for you. Ensure you turn on the following services: storage, dns, helm3 . dashboard is also useful to understand more about k8s and what is running. However it is currently failing as described in issue 2507 As an example, the following commands should get you set up, but always check the official docs for current details brew install ubuntu/microk8s/microk8s microk8s install microk8s status --wait-ready microk8s enable dns storage helm3 microk8s kubectl get all --all-namespaces Kubernetes is now running.","title":"MacOS"},{"location":"intro/k8s/#windows","text":"Follow the official instructions (untested)","title":"Windows"},{"location":"intro/k8s/#linux","text":"Follow the official instructions (untested)","title":"Linux"},{"location":"intro/k8s/#docker-desktop-windows-macos","text":"Docker Desktop supports Kubernetes After installing, go into Docker Desktop 'settings and select 'Kubernetes'. Make sure 'Enable Kubernetes' is checked. Also under resources ensure at least 4GB is allocated to Docker","title":"Docker Desktop (Windows, macOS)"},{"location":"intro/k8s/#cloud","text":"Many cloud providers offer Kubernetes deployments which can be used for experimentation or production. This include Redhat OpenShift on multiple cloud providers including on IBMCloud Kubernetes on IBMCloud Azure Kubernetes Service Google Kubernetes Engine (GKE) Note that in the team's testing we mostly are running Redhat OpenShift on IBMCloud as a managed service. We welcome feedback of running our examples on other environments, especially as some of the specifics around ingress rules, storage, security can vary.","title":"Cloud"},{"location":"more/operator/","text":"","title":"Operator"}]}